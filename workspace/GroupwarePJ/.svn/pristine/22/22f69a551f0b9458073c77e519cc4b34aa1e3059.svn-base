/*
 * Copyright (c) 2010 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package kr.or.ddit.event.controller;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.view.RedirectView;

import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;
import com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.auth.oauth2.CredentialRefreshListener;
import com.google.api.client.auth.oauth2.TokenErrorResponse;
import com.google.api.client.auth.oauth2.TokenResponse;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.DataStoreFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.oauth2.Oauth2;

import kr.or.ddit.vo.EmployeeVO;


@Controller
@RequestMapping("/oauth")
public class OAuthController {

  /**
   * Be sure to specify the name of your application. If the application name is {@code null} or
   * blank, the application will log a warning. Suggested format is "MyCompany-ProductName/1.0".
   */
  private static final String APPLICATION_NAME = "GroupWare";

  /** Directory to store user credentials. */
  private static final java.io.File DATA_STORE_DIR =
      new java.io.File(System.getProperty("user.home"), ".store/oauth2_sample");
  
  /**
   * Global instance of the {@link DataStoreFactory}. The best practice is to make it a single
   * globally shared instance across your application.
   */
  private static FileDataStoreFactory dataStoreFactory;

  /** Global instance of the HTTP transport. */
  private static HttpTransport httpTransport;

  /** Global instance of the JSON factory. */
  private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();

  /** OAuth 2.0 scopes. */
  private static final List<String> SCOPES = Arrays.asList(
        "https://mail.google.com/",
        "https://www.googleapis.com/auth/userinfo.profile",
        "https://www.googleapis.com/auth/gmail.modify",
        "https://www.googleapis.com/auth/gmail.compose",
        "https://www.googleapis.com/auth/gmail.readonly",
        "https://www.googleapis.com/auth/gmail.metadata");

  
  private static Oauth2 oauth2;
  private static GoogleClientSecrets clientSecrets;

  /** Authorizes the installed application to access user's protected data. */
  @GetMapping
  public RedirectView authorize(HttpSession session) throws Exception {
	EmployeeVO empVO = (EmployeeVO)session.getAttribute("authUser");
	String emp_code = empVO.getEmp_code();
	httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    dataStoreFactory = new FileDataStoreFactory(DATA_STORE_DIR);
    
    clientSecrets = GoogleClientSecrets.load(JSON_FACTORY,
        new InputStreamReader(OAuthController.class.getResourceAsStream("/client_secrets.json")));
    if (clientSecrets.getDetails().getClientId().startsWith("Enter")
        || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {
      System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/ "
          + "into oauth2-cmdline-sample/src/main/resources/client_secrets.json");
      System.exit(1);
    }
    
//    GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
//        httpTransport, JSON_FACTORY, clientSecrets, SCOPES).setDataStoreFactory(
//        dataStoreFactory).setAccessType("offline").build();
    GoogleAuthorizationCodeFlow	flow = new GoogleAuthorizationCodeFlow.Builder(
    		httpTransport, JSON_FACTORY, clientSecrets, SCOPES)
            .setDataStoreFactory(dataStoreFactory) .setAccessType("offline").build();
         
    RedirectView view = new RedirectView("/Groupadd");
    Credential credential = null;
    if((credential = flow.loadCredential(emp_code)) == null){
	    String redirectUri = "http://localhost/GroupwarePJ/oauth/check";
	    AuthorizationCodeRequestUrl authorizationUrl = flow.newAuthorizationUrl().setRedirectUri(redirectUri);
	    view = new RedirectView(authorizationUrl.build());
    }else {
    	
    	
    	
    	
    	
    }
    
   

    return view;
  }

  @GetMapping("/check")
	public String main(@RequestParam String code,HttpSession session) throws Exception {
	  EmployeeVO empVO = (EmployeeVO)session.getAttribute("authUser");
	  String emp_code = empVO.getEmp_code();
		httpTransport = GoogleNetHttpTransport.newTrustedTransport();
		dataStoreFactory = new FileDataStoreFactory(DATA_STORE_DIR);
		clientSecrets = GoogleClientSecrets.load(JSON_FACTORY,
				new InputStreamReader(OAuthController.class.getResourceAsStream("/client_secrets.json")));
		GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(httpTransport, JSON_FACTORY,
				clientSecrets, SCOPES).setDataStoreFactory(dataStoreFactory).setAccessType("offline")
						.setCredentialCreatedListener(new AuthorizationCodeFlow.CredentialCreatedListener() {
							@Override
							public void onCredentialCreated(Credential credential, TokenResponse tokenResponse)
									throws IOException {
								dataStoreFactory.getDataStore(emp_code).set("id_token",
										tokenResponse.get("id_token").toString());
							}
						}).addRefreshListener(new CredentialRefreshListener() {
							@Override
							public void onTokenResponse(Credential credential, TokenResponse tokenResponse)
									throws IOException {
								dataStoreFactory.getDataStore(emp_code).set("id_token",
										tokenResponse.get("id_token").toString());
							}
							
							@Override
							public void onTokenErrorResponse(Credential credential,
									TokenErrorResponse tokenErrorResponse) throws IOException {

							}
						}).build();
		
		String redirectUri = "http://localhost/GroupwarePJ/oauth/check";
		TokenResponse response = flow.newTokenRequest(code).setRedirectUri(redirectUri).execute();
		Credential  credential = flow.createAndStoreCredential(response, emp_code);
		System.out.println(credential.refreshToken());
		System.out.println(dataStoreFactory.getDataStore(emp_code));
		System.out.println(code);
		System.out.println(response.getAccessToken());
		System.out.println(response.getRefreshToken());
		return "mailList.mail";
	}

  

}
