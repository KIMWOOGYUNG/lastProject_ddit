package kr.or.ddit.schedule.controller;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.apache.xmlbeans.impl.xb.xsdschema.All;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.enums.ResultState;
import kr.or.ddit.schedule.dao.IDepStandardDAO;
import kr.or.ddit.schedule.dao.IDep_ScheduleDAO;
import kr.or.ddit.schedule.service.IDep_ScheduleService;
import kr.or.ddit.vo.CalendarVO;
import kr.or.ddit.vo.Com_ScheduleVO;
import kr.or.ddit.vo.Dept_ScheduleVO;
import kr.or.ddit.vo.EmployeeVO;
import kr.or.ddit.vo.PagingVO;
import kr.or.ddit.vo.SearchVO;
import retrofit2.http.Path;

@Controller
public class Dep_ScheduleController {
	
	@Inject
	IDep_ScheduleService service;
	
	@Inject
	IDep_ScheduleDAO dao;
	
	@Inject
	IDepStandardDAO stdDAO;
	
	@GetMapping("/plan/depplancalendar/{type}")
	public String depschedulecalendar(@PathVariable String type, Model model,HttpSession session) {
		EmployeeVO empVO= (EmployeeVO) session.getAttribute("authUser");
		
		if("my".equals(type)) {
			List<Dept_ScheduleVO> dscode = dao.selectMyDept(empVO.getEmp_code());
			model.addAttribute("dscode", dscode);
			model.addAttribute("type2","departinnermyplan");
		}else {
			List<Dept_ScheduleVO> dscode = dao.selectdeplist(empVO.getDept_code());
			model.addAttribute("dscode", dscode);
			model.addAttribute("type2","departmentplan");
		}
		model.addAttribute("type", type);
		return "DepScheduleCalendar.plan";
	}
	
	
	@PostMapping(value = "/plan/depplancalendar/{type}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public List<CalendarVO> depscheduleSetting(@PathVariable String type,RedirectAttributes redirectAttributes,HttpSession session){
		List<CalendarVO> dataList = new ArrayList<CalendarVO>();
		List<Dept_ScheduleVO> depList = null;
		EmployeeVO empVO= (EmployeeVO) session.getAttribute("authUser");
		if("my".equals(type)) {
			depList = dao.selectMyDept(empVO.getEmp_code());
		}else {
			depList = dao.selectdeplist(empVO.getDept_code());
		}
		
		for(Dept_ScheduleVO temp : depList) {
			dataList.add(temp.sendDate());
		}
		return dataList;
	}
	
	
	
	
	@ModelAttribute("currentAction")
	private void attributeSetting(Model model) { //스탠다드 세팅 메서드
		model.addAttribute("depimportantnm",stdDAO.selectimportant());
	}
	
	@GetMapping(value="/plan/departmentplanbox/departmentplan", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public PagingVO<Dept_ScheduleVO> ajaxForlist(
			@RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
			SearchVO searchVO, Model model
			){
			depplanList(currentPage, searchVO, model);
			return (PagingVO<Dept_ScheduleVO>) model.asMap().get("pagingVO");
		}
	
	//부서 일정 목록
	@GetMapping("/plan/departmentplanbox/departmentplan")
	public String depplanList(@RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
			SearchVO searchVO, Model model) {
		Dept_ScheduleVO detailSearch = new Dept_ScheduleVO();
		PagingVO<Dept_ScheduleVO> pagingVO = new PagingVO<>(8,3);
		
		pagingVO.setDetailSearch(detailSearch);
		pagingVO.setSearchVO(searchVO);
		pagingVO.setCurrentPage(currentPage);
		
		int totalRecord = service.readdepScheduleCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		
		List<Dept_ScheduleVO> comList = service.readdepScheduleList(pagingVO);
		pagingVO.setDataList(comList);
		
		model.addAttribute("pagingVO", pagingVO);
		
		return "DepSchedule.plan";
	}
	
	
	
	
	@GetMapping(value="/plan/departmentplanbox/departinnermyplan", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public PagingVO<Dept_ScheduleVO> ajaxFordeplist(
			@RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
			SearchVO searchVO, Model model,HttpSession session
			){
		   DepMySchedule(currentPage, searchVO, model,session);
			return (PagingVO<Dept_ScheduleVO>) model.asMap().get("pagingVO");
		}
	//부서 내 일정
	@GetMapping("/plan/departmentplanbox/departinnermyplan")
	public String DepMySchedule(@RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
			SearchVO searchVO, Model model,HttpSession session) {
		String goPage = "DepMySchedule.plan";
		EmployeeVO empVO= (EmployeeVO)session.getAttribute("authUser");
		
		Dept_ScheduleVO detailSearch = new Dept_ScheduleVO();
		detailSearch.setManager(empVO.getEmp_code());
		
		PagingVO<Dept_ScheduleVO> pagingVO = new PagingVO<>(10,5);
		
		pagingVO.setDetailSearch(detailSearch);
		pagingVO.setSearchVO(searchVO);
		pagingVO.setCurrentPage(currentPage);
		
		int totalRecord = service.readdepScheduleCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		
		List<Dept_ScheduleVO> comList = service.readdepScheduleList(pagingVO);
		pagingVO.setDataList(comList);
		
		model.addAttribute("pagingVO", pagingVO);
		
		return goPage;
	}
	
	//부서 내 일정 상세보기
	@GetMapping("/plan/detaildepmyplan/{ds_code}")
	public String detaildepmyplan(@PathVariable(name = "ds_code") String ds_code, Model model) {
		
		Dept_ScheduleVO deptschedulevo =service.readdepSchedule(ds_code);
		model.addAttribute("deptschedule", deptschedulevo);
		
		return "DetailDepMySchedule.plan";
	}
	
	
	//부서 내 일정 등록
	
	//부서 일정 캘린더
//	@GetMapping("/plan/depplancalendar")
//	public String complancalendar() {
//		String goPage="DepScheduleCalendar.plan";
//		return goPage;
//	}
	
	//부서 일정 등록
//	@GetMapping("/plan/depplanenroll")
//	public String Depplanenroll() {
//		String goPage="DepScheduleEnroll.plan";
//		return goPage;
//	}
	
	//부서 일정 상세 보기
		@GetMapping("/plan/detaildepplan/{ds_code}")
		public String detaildepplan(@PathVariable(name = "ds_code") String ds_code, Model model) {
			
			Dept_ScheduleVO deptschedulevo =service.readdepSchedule(ds_code);
			model.addAttribute("deptschedule", deptschedulevo);
			model.addAttribute("methodType","put");
			return "DetailDepSchedule.plan";
		}
		
		
		//부서 일정 삭제(체크박스)
		@PostMapping("/plan/departmentplanbox/departmentplan/deletedept")
		public String deletedeptplan(@RequestParam String ds_code, Model model, HttpSession session) {
		
		if(ds_code.contains(",")) {
			String[] splited = ds_code.split(",");
			for(int i=0; i< splited.length; i++) {
				service.deleteDeptschedule(splited[i]);
			}
		}else {
			service.deleteDeptschedule(ds_code);
		}
		return "DepSchedule.plan";
		}

		
	//부서 캘린더 새창	
	@GetMapping("/plan/dsediter")
	public String goPage() {
		
		return "plan/DsEnrollNewWindow";
	}
	
	
	//부서 일정 수정
	@PutMapping(value = "/plan/detaildepplan/{ds_code}/dsmodify")
	public String update(
			@PathVariable(name = "ds_code") String ds_code,
		@ModelAttribute("deptschedule") Dept_ScheduleVO deptschedulevo, 
		BindingResult errors, Model model,
		RedirectAttributes redirectAttributes)
	{
		String goPage = null;
		String message = null;
		
		
		if (!errors.hasErrors()) {
			ResultState result = service.updateDeptschedule(deptschedulevo);
			switch (result) {
			case FAIL:
				message = "쫌따 다시 해보셈.";
				redirectAttributes.addFlashAttribute("deptschedule", deptschedulevo);
				goPage = "redirect:/plan/detaildepplan/{ds_code}";
				break;
			default: // OK
				goPage = "redirect:/plan/detaildepplan/{ds_code}";
				break;
			}
		} else {
			goPage = "redirect:/plan/detaildepplan/{ds_code}";
			redirectAttributes.addFlashAttribute("deptschedule", deptschedulevo);
		}

		model.addAttribute("message", message);

		return goPage;
		
	}
	
		
		

}










