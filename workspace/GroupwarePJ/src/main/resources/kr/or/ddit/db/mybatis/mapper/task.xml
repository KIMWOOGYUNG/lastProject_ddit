<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.project.dao.ITaskListDAO">
	<sql id="searchFrag">
		<trim prefix="where" prefixOverrides="and">
			<if test="detailSearch.project_code!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.project_code)">
	  	 	 	<choose>
	  	 	 		<when test="detailSearch.emp_code_task!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.emp_code_task)">
							 
						AND TASK_CODE IN ( 
						    SELECT TASK_CODE 
						    FROM TASK 
						    WHERE PJ_MEMCODE IN ( 
						        SELECT PJ_MEMCODE 
						        FROM PJ_MEMBER 
						        WHERE PRG_CODE IN (
						            SELECT PRG_CODE 
						            FROM PJ_RGROUP 
						            WHERE A.PROJECT_CODE = #{detailSearch.project_code})) 
						          AND PJ_MEMCODE IN (
						            SELECT PJ_MEMCODE 
						            FROM PJ_MEMBER 
						            WHERE EMP_CODE = #{detailSearch.emp_code_task})
						   AND A.PROJECT_CODE = #{detailSearch.project_code}
						   ) 
	  	 	 		</when>
	  	 	 		
	  	 	 		<when test="detailSearch.emp_code_task==null and @org.apache.commons.lang3.StringUtils@isBlank(detailSearch.emp_code_task)">
	  	 	 			AND	TASK_CODE IN ( 
						    SELECT TASK_CODE 
						    FROM TASK 
						    WHERE PJ_MEMCODE IN ( 
						          SELECT PJ_MEMCODE 
						          FROM PJ_MEMBER 
						          WHERE PRG_CODE IN (
						              SELECT PRG_CODE 
						              FROM PJ_RGROUP 
						              WHERE A.PROJECT_CODE = #{detailSearch.project_code})))
						 AND A.PROJECT_CODE = #{detailSearch.project_code}
	  	 	 		</when>
	  	 	 		
	  	 	 	</choose>
			 </if>
		
	  	 	 
			 <if test="detailSearch.project_code==null and @org.apache.commons.lang3.StringUtils@isBlank(detailSearch.project_code)">
			 	<choose>
			 		<when test="detailSearch.emp_code_task!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.emp_code_task)">
	  	 	 			AND TASK_CODE IN ( 
						    SELECT TASK_CODE 
						    FROM TASK 
						    WHERE PJ_MEMCODE IN ( 
						        SELECT PJ_MEMCODE 
						        FROM PJ_MEMBER 
						        WHERE EMP_CODE = #{detailSearch.emp_code_task}
						        ))
	  	 	 		</when>
			 	
	  	 	 		<when test="detailSearch.emp_code_task==null and @org.apache.commons.lang3.StringUtils@isBlank(detailSearch.emp_code_task)">
	  	 	 			AND TASK_CODE IN ( 
						    SELECT TASK_CODE 
						    FROM TASK 
						    WHERE PJ_MEMCODE IN ( 
						        SELECT PJ_MEMCODE 
						        FROM PJ_MEMBER )) 
	  	 	 		</when>
	  	 	 		
	  	 	 	</choose>
			 </if>
			 
			 <if test="searchVO!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.searchWord)">
			 	<choose>
			 		<when test="'name'.equals(searchVO.searchType)">
			 			AND INSTR(TASK_NAME, #{searchVO.searchWord}) > 0
			 		</when>
			 		<when test="'employee'.equals(searchVO.searchType)">
			 			AND F.EMP_KOR LIKE '%' || #{searchVO.searchWord} || '%'
			 		</when>
			 	</choose>
			 </if>
		</trim>
	</sql>

<!-- 일감 목록 조회 -->
	<select id="selectTaskCount" resultType="int" parameterType="PagingVO">
		SELECT COUNT(*)
		FROM TASK A INNER JOIN STANDARD B ON (A.TASK_TYPE = B.STANDARD_CODE)
		            INNER JOIN STANDARD C ON (A.TASK_STAT = C.STANDARD_CODE)
		            INNER JOIN STANDARD D ON (A.TASK_IMPORTANT = D.STANDARD_CODE)
		            INNER JOIN PJ_MEMBER E ON (A.PJ_MEMCODE = E.PJ_MEMCODE)
		            INNER JOIN EMPLOYEE F ON (E.EMP_CODE = F.EMP_CODE)
		<include refid="searchFrag" />
	</select>
	
	<select id="selectTaskList" resultType="TaskVO" parameterType="PagingVO">
		SELECT G.*
		FROM (
			SELECT ROWNUM RNUM, TASK_CODE, TASK_NAME, B.STANDARD_NAME TASK_TYPE, C.STANDARD_NAME TASK_STAT, D.STANDARD_NAME TASK_IMPORTANT, F.EMP_KOR, TO_CHAR(TASK_CHANGE,'YYYY-MM-DD') TASK_CHANGE, TASK_PROGRESS
					, H.PROJECT_NAME
			FROM TASK A INNER JOIN STANDARD B ON (A.TASK_TYPE = B.STANDARD_CODE)
		            INNER JOIN STANDARD C ON (A.TASK_STAT = C.STANDARD_CODE)
		            INNER JOIN STANDARD D ON (A.TASK_IMPORTANT = D.STANDARD_CODE)
		            INNER JOIN PJ_MEMBER E ON (A.PJ_MEMCODE = E.PJ_MEMCODE)
		            INNER JOIN EMPLOYEE F ON (E.EMP_CODE = F.EMP_CODE)
		            INNER JOIN PROJECT H ON (A.PROJECT_CODE = H.PROJECT_CODE)
			<include refid="searchFrag" />
			ORDER BY TASK_CODE ASC
		) G
		<![CDATA[
			WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
		]]>   
		ORDER BY G.RNUM
	</select>

<!-- 일감 상세보기 -->
	<resultMap type="TaskVO" id="taskMap" autoMapping="true">
		<id property="task_code" column="TASK_CODE"/>
		<collection property="task_attList" javaType="java.util.List" ofType="Task_AttVO" autoMapping="true" />
	</resultMap>
	
	<select id="selectTask" parameterType="String" resultMap="taskMap">
		SELECT A.TASK_CODE, TASK_NAME, B.STANDARD_NAME AS TASK_TYPE, C.STANDARD_NAME AS TASK_STAT, D.STANDARD_NAME AS TASK_IMPORTANT,        
		        A.PJ_MEMCODE, G.EMP_KOR AS EMP_KOR, TO_CHAR(TASK_CHANGE, 'YYYY-MM-DD') TASK_CHANGE, TO_CHAR(TASK_START, 'YYYY-MM-DD') TASK_START, 
		        TO_CHAR(TASK_END, 'YYYY-MM-DD') TASK_END, TASK_PROGRESS, A.PROJECT_CODE, TASK_CONTENT, E.PROJECT_NAME, 
		        H.TASK_ATTCODE, H.FILE_PATH, H.FILE_SIZE, H.ORG_NAME, H.SAVE_NAME       
        FROM TASK A INNER JOIN STANDARD B ON (A.TASK_TYPE = B.STANDARD_CODE)       
	        INNER JOIN STANDARD C ON (A.TASK_STAT = C.STANDARD_CODE)       
	        INNER JOIN STANDARD D ON (A.TASK_IMPORTANT = D.STANDARD_CODE)       
	        INNER JOIN PROJECT E ON (A.PROJECT_CODE = E.PROJECT_CODE)            
	        INNER JOIN PJ_MEMBER F ON (A.PJ_MEMCODE = F.PJ_MEMCODE)          
	        INNER JOIN EMPLOYEE G ON (F.EMP_CODE = G.EMP_CODE)          
	        LEFT OUTER JOIN TASK_ATT H ON (A.TASK_CODE = H.TASK_CODE) 
		 WHERE A.TASK_CODE = #{task_code}
	</select>
	
<!-- 일감 등록 -->	
	<select id="selectPJ_Member" parameterType="TaskVO" resultType="String">
		SELECT PJ_MEMCODE 
		  FROM PJ_MEMBER A INNER JOIN PJ_RGROUP B ON (A.PRG_CODE = B.PRG_CODE)
		 WHERE A.PRG_CODE = #{prg_code}
		  AND  A.EMP_CODE = #{emp_code_task}
	</select>
	
	<select id="selectPrgCode" parameterType="ProjectVO" resultType="String">
		SELECT A.PRG_CODE
		  FROM PJ_RGROUP A INNER JOIN PJ_MEMBER B ON (A.PRG_CODE = B.PRG_CODE)
		 WHERE PROJECT_CODE = #{project_code}
		   AND EMP_CODE = #{emp_code}
	</select>
	
	<insert id="insertTask" parameterType="TaskVO">
		<selectKey resultType="String" keyProperty="task_code" order="BEFORE">
			SELECT 'TS' || LPAD(NVL(TO_NUMBER(SUBSTR(MAX(TASK_CODE), 3)), 0)+1, 3, '0') 
			FROM TASK
		</selectKey>
		INSERT INTO TASK (
		    TASK_CODE, TASK_NAME, TASK_TYPE, TASK_STAT, TASK_IMPORTANT,
		    PJ_MEMCODE, TASK_CHANGE, TASK_START, TASK_END, TASK_PROGRESS, PROJECT_CODE, TASK_CONTENT
		) VALUES (
		   #{task_code}, #{task_name,jdbcType=VARCHAR}, #{task_type,jdbcType=VARCHAR}, #{task_stat,jdbcType=VARCHAR}, #{task_important,jdbcType=VARCHAR}
		   , #{pj_memcode,jdbcType=VARCHAR}, SYSDATE, #{task_start,jdbcType=DATE}, #{task_end,jdbcType=DATE}, #{task_progress,jdbcType=NUMERIC}
		   , #{project_code,jdbcType=VARCHAR}, #{task_content,jdbcType=CLOB}
		)
	</insert>
	
<!-- 일감 수정 -->
	<update id="updateTask" parameterType="TaskVO">
		UPDATE TASK
		    SET
		    TASK_NAME = #{task_name,jdbcType=VARCHAR},
		    TASK_TYPE = #{task_type,jdbcType=VARCHAR},
		    TASK_STAT = #{task_stat,jdbcType=VARCHAR},
		    TASK_IMPORTANT = #{task_important,jdbcType=VARCHAR},
		    PJ_MEMCODE = #{pj_memcode,jdbcType=VARCHAR},
		    TASK_CHANGE = SYSDATE,
		    TASK_START = #{task_start,jdbcType=DATE},
		    TASK_END = #{task_end,jdbcType=DATE},
		    TASK_PROGRESS = #{task_progress,jdbcType=NUMERIC},
		    PROJECT_CODE = #{project_code,jdbcType=VARCHAR},
		    TASK_CONTENT = #{task_content,jdbcType=CLOB}
		WHERE
		    TASK_CODE = #{task_code,jdbcType=VARCHAR}
	</update>
	
<!-- 일감 삭제 -->
	<delete id="deleteTask" parameterType="String">
		DELETE FROM TASK
		WHERE TASK_CODE = #{task_code}
	</delete>
	
<!-- 일감캘린더 -->
	<select id="selectTaskCal" resultType="TaskVO">
		SELECT TASK_CODE, TASK_NAME, TASK_START, TASK_END, TASK_TYPE, TASK_STAT, 
				TASK_IMPORTANT, A.PJ_MEMCODE, TASK_CHANGE, TASK_PROGRESS, PROJECT_CODE, TASK_CONTENT,
				EMP_KOR
		FROM TASK A INNER JOIN PJ_MEMBER B ON (A.PJ_MEMCODE = B.PJ_MEMCODE)
					INNER JOIN EMPLOYEE C ON (B.EMP_CODE = C.EMP_CODE)
		WHERE PROJECT_CODE = #{project_code}
	</select>
	
	<update id="updateTaskCal" parameterType="TaskVO">
		UPDATE TASK 
			SET
			TASK_START = #{task_start,jdbcType=DATE},
			TASK_END = #{task_end,jdbcType=DATE}
		WHERE TASK_CODE = #{task_code}
	</update>
	
<!-- 일감간트 -->
	<select id="selectTaskGantt" resultType="TaskVO">
		SELECT TASK_CODE, TASK_NAME, TO_CHAR(TASK_START, 'DD-MM-YYYY') TASK_START, TO_CHAR(TASK_END, 'DD-MM-YYYY') TASK_END, TASK_TYPE, TASK_STAT, 
				TASK_IMPORTANT, A.PJ_MEMCODE, (TASK_PROGRESS/100) AS PROGRESS_DOUBLE, PROJECT_CODE, TASK_CONTENT, EMP_KOR, (TO_DATE(TASK_END,'YYYY-MM-DD') - TO_DATE(TASK_START,'YYYY-MM-DD') + 1) AS DURATION
		  FROM TASK A INNER JOIN PJ_MEMBER B ON (A.PJ_MEMCODE = B.PJ_MEMCODE)
		  			  INNER JOIN EMPLOYEE C ON (B.EMP_CODE = C.EMP_CODE)
		 WHERE PROJECT_CODE = #{project_code}
	</select>
</mapper>