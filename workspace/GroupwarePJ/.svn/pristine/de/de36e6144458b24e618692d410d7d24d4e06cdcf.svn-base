<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.project.dao.IProjectListDAO">
	<sql id="searchFrag">
	
			<trim prefix="where" prefixOverrides="and">
				<if test="detailSearch!=null">
					<if test="detailSearch.emp_code!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.emp_code)">
						AND PROJECT_CODE IN (
							SELECT PROJECT_CODE
							  FROM PJ_RGROUP
							 WHERE PRG_CODE IN (
								SELECT PRG_CODE
								  FROM PJ_MEMBER
								 WHERE EMP_CODE = #{detailSearch.emp_code}))
					</if>
				</if>	
				
				<if test="searchVO!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.searchWord)">
					<choose>
						<when test="'name'.equals(searchVO.searchType)">
							AND PROJECT_CODE = (SELECT PROJECT_CODE
							                        FROM PJ_RGROUP
							                        WHERE PRG_CODE =(SELECT PRG_CODE
							                                        FROM PJ_MEMBER
							                                        WHERE EMP_CODE = (SELECT EMP_CODE
							                                                            FROM EMPLOYEE
							                                                            WHERE EMP_KOR LIKE '%' || #{searchVO.searchWord} || '%')))
						</when>
						<when test="'pjName'.equals(searchVO.searchType)">
								AND INSTR(PROJECT_NAME, #{searchVO.searchWord}) > 0
						</when>
						<when test="'dept'.equals(searchVO.searchType)">
								AND B.DEPT_NAME LIKE '%' || #{searchVO.searchWord} || '%'
						</when>
					</choose>
					
				</if>	
			</trim>
	</sql>
	
	<sql id="searchFrag2">
		FROM EMPLOYEE A INNER JOIN DEPARTMENT B ON (A.DEPT_CODE = B.DEPT_CODE)
		INNER JOIN TEAM C ON (A.TEAM_CODE = C.TEAM_CODE)
		INNER JOIN POSITION D ON (A.POSITION_CODE = D.POSITION_CODE)
		
		
		<trim prefix=" WHERE " prefixOverrides=" AND ">
			<if test="detailSearch!=null">
			RETIRE_DATE IS NULL
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.dept_code)">
					AND A.DEPT_CODE = #{detailSearch.dept_code} 
				</if>
				<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(detailSearch.team_code)">
					AND	C.TEAM_CODE = #{detailSearch.team_code}
				</if>
			</if>
		</trim>        
	</sql>
	
	
	<select id="selectProjectCount" resultType="int" parameterType="kr.or.ddit.vo.PagingVO">
		SELECT COUNT(PROJECT_CODE)
		FROM PROJECT A INNER JOIN DEPARTMENT B ON (A.DEPT_CODE = B.DEPT_CODE)
			<include refid="searchFrag" />
	</select>
	
	
	<resultMap type="kr.or.ddit.vo.ProjectVO" id="projectListMap" autoMapping="true">
		<id property="project_code" column="PROJECT_CODE"/>
		<collection property="pj_rgroupList" javaType="java.util.List" ofType="PJ_RgroupVO" >
			<id property="pr_code" column="PR_NAME"/>
			<id property="emp_name" column="EMP_CODE"/>
		</collection>
	</resultMap>
	
	<select id="selectProjectList" resultMap="projectListMap" parameterType="kr.or.ddit.vo.PagingVO">
		SELECT A.*, PR_NAME, H.EMP_KOR AS EMP_CODE
		FROM (
			SELECT ROWNUM RNUM, PROJECT_CODE, DEPT_NAME, PROJECT_NAME, 
				   PROJECT_PROGRESS, C.STANDARD_NAME AS PROJECT_IMPORTANT, D.STANDARD_NAME AS PROJECT_STAT, PROJECT_SUM, PROJECT_HIDE
			  FROM  PROJECT A INNER JOIN DEPARTMENT B ON (A.DEPT_CODE = B.DEPT_CODE)
			  		LEFT OUTER JOIN STANDARD C ON (PROJECT_IMPORTANT = C.STANDARD_CODE)
			  		LEFT OUTER JOIN STANDARD D ON (PROJECT_STAT = D.STANDARD_CODE)
			  		
			  
			<include refid="searchFrag" />
			
		) A
			LEFT OUTER JOIN PJ_RGROUP E ON (A.PROJECT_CODE = E.PROJECT_CODE)
			LEFT OUTER JOIN PROJECT_ROLE F ON (E.PR_CODE = F.PR_CODE)
			LEFT OUTER JOIN PJ_MEMBER G ON (E.PRG_CODE = G.PRG_CODE)
			LEFT OUTER JOIN EMPLOYEE H ON (G.EMP_CODE = H.EMP_CODE)
		<![CDATA[
			WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
		]]>
		ORDER BY A.PROJECT_CODE ASC
	</select>
	
	<resultMap type="kr.or.ddit.vo.ProjectVO" id="projectMap" autoMapping="true">
		<id property="project_code" column="PROJECT_CODE"/>
		<collection property="pj_rgroupList" javaType="java.util.List" ofType="PJ_RgroupVO" >
			<id property="pr_code" column="PR_NAME"/>
			<id property="emp_name" column="EMP_NAME"/>
		</collection>
	</resultMap>
	
	<select id="selectProject" parameterType="String" resultMap="projectMap">
		SELECT G.PROJECT_CODE, PROJECT_NAME, PROJECT_CONTENT, PROJECT_SUM, TO_CHAR(PROJECT_START,'YYYY-MM-DD') PROJECT_START, TO_CHAR(PROJECT_END,'YYYY-MM-DD') PROJECT_END, PROJECT_PROGRESS,
		    H.PR_NAME, EMP_KOR AS EMP_NAME, 
		    DEPT_NAME, J.STANDARD_NAME AS PROJECT_IMPORTANT, K.STANDARD_NAME AS PROJECT_STAT
		FROM PROJECT G LEFT OUTER JOIN (
		    SELECT PROJECT_CODE, E.PRG_CODE, PR_NAME, PJ_MEMCODE, EMP_KOR
		    FROM(
		        SELECT PROJECT_CODE, PRG_CODE,  A.PR_CODE, PR_NAME
		        FROM PJ_RGROUP A INNER JOIN PROJECT_ROLE B ON ( A.PR_CODE = B.PR_CODE)) E
		    INNER JOIN (
		        SELECT C.PRG_CODE, C.PJ_MEMCODE, C.EMP_CODE, D.EMP_KOR
		        FROM PJ_MEMBER C INNER JOIN EMPLOYEE D ON (C.EMP_CODE = D.EMP_CODE)) F ON(E.PRG_CODE = F.PRG_CODE)
		    ) H ON (G.PROJECT_CODE = H.PROJECT_CODE)
			INNER JOIN DEPARTMENT I ON (G.DEPT_CODE = I.DEPT_CODE)
			INNER JOIN STANDARD J ON (G.PROJECT_IMPORTANT = J.STANDARD_CODE)
			INNER JOIN STANDARD K ON (G.PROJECT_STAT = K.STANDARD_CODE)
		WHERE G.PROJECT_CODE = #{project_code}
	</select>
	
	
	<delete id="deleteProject" parameterType="String">
		DELETE FROM PROJECT
		WHERE PROJECT_CODE = #{project_code}
	</delete>
	
	<select id="selectProjectListForTask" parameterType="String" resultType="ProjectVO">
		SELECT A.PROJECT_CODE, PROJECT_NAME
		  FROM PROJECT A INNER JOIN PJ_RGROUP B ON (A.PROJECT_CODE = B.PROJECT_CODE)
		       INNER JOIN PJ_MEMBER C ON (B.PRG_CODE = C.PRG_CODE)
		  WHERE C.EMP_CODE = #{emp_code}
	</select>
	
	<select id="selectEmpList" parameterType="pagingVO" resultType="EmployeeVO">
		SELECT Z.*
		FROM(
			SELECT ROWNUM RNUM, A.DEPT_CODE, B.DEPT_NAME, A.TEAM_CODE, C.TEAM_NAME, A.EMP_CODE, A.EMP_KOR, D.POSITION_NAME
			<include refid="searchFrag2"/>
		)Z
		WHERE Z.RNUM BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<select id="selectEmpCount" parameterType="pagingVO" resultType="int">
		SELECT COUNT(*)
	    <include refid="searchFrag2"/>
	</select>
	
	<select id="selectRoleList" resultType="Project_roleVO">
		SELECT PR_CODE, PR_NAME
		  FROM PROJECT_ROLE
	</select>
	
	<insert id="insertProject" parameterType="ProjectVO">
		<selectKey resultType="String" keyProperty="project_code" order="BEFORE">
			SELECT 'PJ' || LPAD(NVL(TO_NUMBER(SUBSTR(MAX(PROJECT_CODE), 3)), 0)+1, 3, '0') 
			FROM PROJECT
		</selectKey>
		INSERT INTO PROJECT(
			PROJECT_CODE,
			DEPT_CODE,
			PROJECT_NAME,
			PROJECT_CONTENT,
			PROJECT_SUM,
			PROJECT_START,
			PROJECT_END,
			PROJECT_PROGRESS,
			PROJECT_STAT,
			PROJECT_IMPORTANT,
			PROJECT_HIDE) 
		VALUES(
			#{project_code}, 
			#{dept_code}, 
			#{project_name}, 
			#{project_content}, 
			#{project_sum}, 
			#{project_start}, 
			#{project_end}, 
			#{project_progress}, 
			#{project_stat}, 
			#{project_important}, 
			#{project_hide})
	</insert>
	
	<insert id="insertPJ_Rgroup">
		<selectKey resultType="String" keyProperty="prg_code" order="BEFORE">
			SELECT 'PG' || LPAD(NVL(TO_NUMBER(SUBSTR(MAX(PRG_CODE), 3)), 0)+1, 3, '0') 
			FROM PJ_RGROUP
		</selectKey>
		INSERT INTO PJ_RGROUP(
			PRG_CODE,
			PR_CODE,
			PROJECT_CODE
		) VALUES(
			#{prg_code}, 
			#{pr_code}, 
			#{project_code})
	</insert>
	
	<insert id="insertPJ_Member">
		<selectKey resultType="String" keyProperty="pj__memcode" order="BEFORE">
			SELECT 'PM' || LPAD(NVL(TO_NUMBER(SUBSTR(MAX(PJ__MEMCODE), 3)), 0)+1, 3, '0') 
			FROM PJ_MEMBER
		</selectKey>
		INSERT INTO PJ_MEMBER(
			PJ_MEMCODE,
			PRG_CODE,
			EMP_CODE,
			PJM_PROGRESS
		) VALUES(
			#{pj_memcode}, 
			#{prg_code}, 
			#{emp_code}, 
			#{pjm_progress})
	</insert>
</mapper>