package kr.or.ddit.message.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.enums.ResultState;
import kr.or.ddit.message.service.IMessageService;
import kr.or.ddit.vo.EmployeeVO;
import kr.or.ddit.vo.MessageVO;
import kr.or.ddit.vo.PagingVO;
import kr.or.ddit.vo.SearchVO;

@Controller
public class MsgController {
	@Inject
	IMessageService service;
	
	@GetMapping("/note/noteList")
	public String mymsg() {
		return "noteList.note";
	}
	@GetMapping(value = "/note/{pos}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE) //
	@ResponseBody
	public PagingVO<MessageVO> ajaxForlist(@PathVariable(name = "pos") String pos,
			@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			HttpSession session, Model model
			){
		Entirenote(pos, currentPage, session, model);
				return (PagingVO<MessageVO>) model.asMap().get("pagingVO");
	}
	
	@GetMapping("/note/{pos}")//전체쪽지리스트 
	public String Entirenote(@PathVariable(name  = "pos") String pos,
			@RequestParam(name = "page",required =false,defaultValue = "1")
	int currentPage, HttpSession session, Model model) {
		PagingVO<MessageVO> pagingVO = new PagingVO<>();
		EmployeeVO empVO=(EmployeeVO) session.getAttribute("authUser");
		MessageVO msgVO= new MessageVO();
		if("entirenote".equals(pos)) {
			msgVO.setEmp_receiver(empVO.getEmp_code());
			msgVO.setEmp_sender(empVO.getEmp_code());
			model.addAttribute("title", "전체 쪽지함");
		}else if("receivenote".equals(pos)) {
			msgVO.setEmp_receiver(empVO.getEmp_code());
			model.addAttribute("title", "수신쪽지함");
		}else if("sendnote".equals(pos)) {
			msgVO.setEmp_sender(empVO.getEmp_code());
			model.addAttribute("title", "발신쪽지함");
		}
		
		
		pagingVO.setDetailSearch(msgVO);
		pagingVO.setCurrentPage(currentPage);
		
		int totalRecord = service.selectMessageCount(pagingVO);
		List<MessageVO> dataList = service.msgList(pagingVO);
		
		pagingVO.setTotalRecord(totalRecord);
		pagingVO.setDataList(dataList);
		
		model.addAttribute("pagingVO",pagingVO);
		model.addAttribute("pos",pos);
		return "Entirenote.note";
	}
//	//상세페이지
	@GetMapping("/note/detailnote/{msg_code}") 
	public String Detailnote(@PathVariable(name = "msg_code",required = true)String msg_code,Model model) {
		MessageVO msgVO = service.selectmsg(msg_code);
//		model.addAttribute("msg", msgVO);
		model.addAttribute("msgVO", msgVO);
		return "Detailnote.note";
		
	}
	//중요보관함
	@GetMapping(value = "/note/importantnote/{msg_code}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE) 
//	@ResponseBody
	public PagingVO<MessageVO> ajaxmoveForlist(
//			@PathVariable(name = "msginport")
			@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			HttpSession session, Model model, @RequestParam String msg_code
			){
		Entirenote( msg_code, currentPage, session, model);
				return (PagingVO<MessageVO>) model.asMap().get("pagingVO");
	}
	
	@GetMapping("/note/importantnote/{msg_code}") //중요보관함
//	@ResponseBody
	public String Importnote(@Valid  @RequestParam(name = "msg_code",required = true, defaultValue = "1")  
	int currentPage, SearchVO searchVO, Model model, HttpSession session, MessageVO msg_code, Errors error)  {
		EmployeeVO empVO = (EmployeeVO) session.getAttribute("authUser");
		
		String goPage = null;
		String message = null;
		if(!error.hasErrors()) {
			ResultState result = service.updateImportant(msg_code);
			switch(result) {
			case FAIL :
				goPage="Importantnote.note";
				message="다시 이동버튼을 눌러주세요";
				break;
				
				default:
					goPage="redirect:/note/Importantnote";
					message="이동이 완료되었습니다.";
			}
		}else {
			goPage="Importantnote.note";
		}
		model.addAttribute("message", msg_code);
		return goPage;
	}
	
	
	
	
	
	@GetMapping("/note/deletenote") //삭제쪽지
	public String Deletenote() {
		String goPage="Deletenote.note";
		return goPage;
		
	}
	
	
	
}
