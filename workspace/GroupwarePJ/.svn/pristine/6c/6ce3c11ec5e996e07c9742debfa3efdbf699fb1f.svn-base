package kr.or.ddit.community.service;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.WebApplicationContext;

import exception.DataNotFoundException;
import kr.or.ddit.community.dao.IBoardAttatchDAO;
import kr.or.ddit.community.dao.IBoardDAO;
import kr.or.ddit.enums.ResultState;
import kr.or.ddit.vo.BoardVO;
import kr.or.ddit.vo.Board_AttatchVO;
import kr.or.ddit.vo.PagingVO;

@Service
public class BoardServiceImpl implements IBoardService {

	@Inject
	IBoardDAO dao;
	@Inject
	IBoardAttatchDAO attatchDAO;
	
	@Inject
	WebApplicationContext context;
	@Value("#{appInfo.attatchPath}")
	String attatchPath;
	@Value("#{appInfo.attatchPath}")
	File saveFolder;
	
	@PostConstruct
	public void init() {
//		String realPath = context.getServletContext().getRealPath(attatchPath);
//		saveFolder = new File(realPath);
		if(!saveFolder.exists()) saveFolder.mkdirs();
	}
	
	private void deleteBinary(String[] delAttSaveNames) {
		if(delAttSaveNames==null || delAttSaveNames.length==0) return;
		try {
			for(String delName : delAttSaveNames) {
				FileUtils.forceDelete(new File(saveFolder, delName));
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	public int processAttatches(BoardVO board) {
		String[] delNos = board.getDeleteAttatches();
		int rowcnt = 0;
		String[] delAttSaveNames = null;
		if(delNos != null && delNos.length>0) {
			delAttSaveNames = new String[delNos.length];
			for(int i=0; i<delNos.length; i++) {
				delAttSaveNames[i] = attatchDAO.selectAttatch(delNos[i]).getSave_name();
			}
			rowcnt = attatchDAO.deleteAttatchs(board);
			deleteBinary(delAttSaveNames);
		}
		
		List<Board_AttatchVO> attatchList = board.getAttatchList();
		if(attatchList != null && !attatchList.isEmpty()) {
			try {
				for(Board_AttatchVO attatch : attatchList) {
					attatch.setBoard_code(board.getBoard_code());;
					rowcnt += attatchDAO.insertAttatchs(attatch);
					attatch.getRealFile().transferTo(new File(saveFolder, attatch.getSave_name()));
				}
			} catch (IllegalStateException | IOException e) {
				throw new RuntimeException(e);
			}
		}
		
		deleteBinary(delAttSaveNames);
		return rowcnt;
	}
	
	@Transactional
	@Override
	public ResultState insertBoard(BoardVO board) {
		ResultState result = null;
		int cnt = dao.insertBoard(board);
		cnt += processAttatches(board);
		if(cnt > 0) {
			result = ResultState.OK;
		}else {
			result = ResultState.FAIL;
		}
		return result;
	}

	@Override
	public int selectBoardCount(PagingVO<BoardVO> pagingVO) {
		return dao.selectBoardCount(pagingVO);
	}

	@Override
	public List<BoardVO> selectBoardList(PagingVO<BoardVO> pagingVO) {
		return dao.selectBoardList(pagingVO);
	}

	@Override
	public BoardVO selectBoard(String board_code) {
		BoardVO board = dao.selectBoard(board_code);
		
		dao.incrementHit(board_code);
		
		return board;
	}

	@Override
	public ResultState updateBoard(BoardVO board) {
		ResultState result = null;
		int cnt = dao.updateBoard(board);
		if(cnt>0) {
			result = ResultState.OK;
		}else {
			result = ResultState.FAIL;
		}
		
		return result;
	}

	@Override
	public ResultState deleteBoard(String board_code) {
		ResultState result = null;
		int cnt = dao.deleteBoard(board_code);
		if(cnt>0) {
			result = ResultState.OK;
		}else {
			result = ResultState.FAIL;
		}
		return result;
	}

	@Override
	public Board_AttatchVO downloadAttatch(String board_attcode) {
		Board_AttatchVO attatch = attatchDAO.selectAttatch(board_attcode);
		if(attatch==null) {
			throw new DataNotFoundException(board_attcode + "파일이 없음.");
		}
		attatchDAO.incrementDownCount(board_attcode);
		return attatch;
	}

}
