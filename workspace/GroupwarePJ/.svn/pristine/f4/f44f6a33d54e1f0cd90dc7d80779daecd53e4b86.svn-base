package kr.or.ddit.project.service;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import exception.DataNotFoundException;
import kr.or.ddit.enums.ResultState;
import kr.or.ddit.project.dao.IProjectListDAO;
import kr.or.ddit.vo.EmployeeVO;
import kr.or.ddit.vo.PJ_MemberVO;
import kr.or.ddit.vo.PJ_RgroupVO;
import kr.or.ddit.vo.PagingVO;
import kr.or.ddit.vo.ProjectVO;
import kr.or.ddit.vo.Project_roleVO;

@Service
public class ProjectListServiceImpl implements IProjectListService {
	@Inject
	IProjectListDAO dao;
	
//프로젝트 등록
	@Transactional
	@Override
	public ResultState insertProject(ProjectVO project) {
		ResultState result = null;
		
		//pj_rgroup의 pk세팅
//		int prg_pk = dao.selectPRG_PK();		
//		System.out.println("@@@@@"+String.format("PJ%03d", prg_pk++));
//		List<PJ_RgroupVO> pj_rgroupList = project.getPj_rgroupList();	
//		for(int i = 0; i < pj_rgroupList.size(); i++) {
//			pj_rgroupList.get(i).setPrg_code(String.format("PJ%03d", prg_pk++));
//		}
		
		//프로젝트 insert
		int cnt = dao.insertProject(project);
		
		if(cnt > 0) {
			result = ResultState.OK;
		}else {
			result = ResultState.FAIL;
		}
		return result;
	}

//프로젝트 목록 조회
	@Override
	public int selectProjectCount(PagingVO<ProjectVO> pagingVO) {
		return dao.selectProjectCount(pagingVO);
	}

	@Override
	public List<ProjectVO> selectProjectList(PagingVO<ProjectVO> pagingVO) {
		return dao.selectProjectList(pagingVO);
	}

//프로젝트 상세조회
	@Override
	public ProjectVO selectProject(String project_code) {
		ProjectVO vo = dao.selectProject(project_code);
		if(vo == null) {
			throw new DataNotFoundException(project_code + "에 해당하는 프로젝트는 없음");
		}
		return vo;
	}

//프로젝트 수정
	@Override
	public ResultState updateProject(ProjectVO project) {
		// TODO Auto-generated method stub
		return null;
	}

//프로젝트 삭제
	@Override
	public ResultState deleteProject(String project_code) {
		ResultState result = null;
		int cnt = dao.deleteProject(project_code);
		if(cnt > 0) {
			result = ResultState.OK;
		}else {
			result = ResultState.FAIL;
		}
		return result;
	}

	@Override
	public List<ProjectVO> selectProjectListForTask(String emp_code) {
		return dao.selectProjectListForTask(emp_code);
	}

	@Override
	public List<EmployeeVO> selectEmpList(PagingVO<EmployeeVO> pagingVO) {
		return dao.selectEmpList(pagingVO);
	}

	@Override
	public int readEmpCount(PagingVO<EmployeeVO> pagingVO) {
		return dao.selectEmpCount(pagingVO);
	}

	@Override
	public List<Project_roleVO> selectRoleList() {
		return dao.selectRoleList();
	}

//팀 멤버 관리
	
	@Override
	public List<PJ_RgroupVO> selectPJ_Rgroup(String project_code) {
		return dao.selectPJ_Rgroup(project_code);
	}

	@Override
	public ResultState insertPJ_Member(PJ_MemberVO pjMember) {
		ResultState result = null;
		int cnt = dao.insertPJ_Member(pjMember);
		
		if(cnt > 0) {
			result = ResultState.OK;
		}else {
			result = ResultState.FAIL;
		}
		return result;
	}

	@Override
	public String selectPJ_MemCode(PJ_MemberVO pj_member) {
		String result = null;
		String pj_memcode = dao.selectPJ_MemCode(pj_member);
		if(pj_memcode == null) {
			result = "해당하는 팀 멤버는 없습니다.";
		}else {
			result = pj_memcode;
		}
		return result;
	}

	@Override
	public ResultState deletePJ_Member(String pj_memcode) {
		ResultState result = null;
		int cnt = dao.deletePJ_Member(pj_memcode);
		
		if(cnt > 0) {
			result = ResultState.OK;
		}else {
			result = ResultState.FAIL;
		}
		return result;
	}

}
