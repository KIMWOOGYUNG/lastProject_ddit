/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.54
 * Generated at: 2020-08-18 00:48:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.approval;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class addressList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1593409600303L));
    _jspx_dependants.put("jar:file:/D:/A_TeachingMaterial/7.LastProject/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/GroupwarePJ/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\t#content {padding: 50px;}\r\n");
      out.write("\t.card-body{width: 100%; padding: 20px 40px 20px 40px}\r\n");
      out.write("\t.text, .form-control{display: inline;}\r\n");
      out.write("\t#groupName{width:60%; margin-left:10px;}\r\n");
      out.write("\t#tree1{padding: 20px, 0px, 20px, 0px}\r\n");
      out.write("/* \t.oi{width:5px; heigth:5px;} */\r\n");
      out.write("</style>\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/dynatree-master/dist/skin-vista/ui.dynatree.css\" rel=\"stylesheet\" type=\"text/css\" id=\"skinSheet\">\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/dynatree-master/dist/jquery.dynatree.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<div id=\"content\">\r\n");
      out.write("\t<div class=\"card card-primary\">\r\n");
      out.write("\t\t<div class=\"card-header\">\r\n");
      out.write("\t\t\t<h3 class=\"card-title\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${title }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h3>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t<div class=\"form-group\">\r\n");
      out.write("\t\t\t\t<label for=\"inputName\" class=\"text\">그룹명</label> \r\n");
      out.write("\t\t\t\t<input type=\"text\" id=\"groupName\" class=\"form-control\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dataList.line_name }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t \t<div id=\"tree1\"></div>\r\n");
      out.write("\t\t   \t<button id=\"btn1\" class=\"btn btn-default\"><span class=\"oi oi-plus\"></span></button>\r\n");
      out.write("\t\t   \t<button id=\"btn2\" class=\"btn btn-default\"><span class=\"oi oi-minus\"></span></button>\r\n");
      out.write("\t\t    <div id=\"tree2\"></div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"card-footer\">\r\n");
      out.write("\t\t    <button class=\"btn btn-default float-right\">취소</button>  \r\n");
      out.write("\t\t    <button id=\"addBtn\" class=\"btn btn-primary float-right\">설정</button>\r\n");
      out.write("    \t</div>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<script>\r\n");
      out.write("if('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${position}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'== 'modify'){\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/approval/setting/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${state }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/modify/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${lineCode}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("\t\t,dataType : \"json\"\r\n");
      out.write("\t\t,success : function(resp){\r\n");
      out.write("\t\t\tlet empList = resp.empList;\r\n");
      out.write("\t\t\tlet node2 = $(\"#tree2\").dynatree(\"getTree\").selectKey(\"group\");\r\n");
      out.write("\t\t\tnode2.setTitle(resp.line_name);\r\n");
      out.write("\t\t\tif(empList!= null){\r\n");
      out.write("\t\t\t\t$.each(empList,function(idx,emp){\r\n");
      out.write("\t\t\t\t\tlet key = emp.emp_code;\r\n");
      out.write("\t\t\t\t\tlet title = emp.emp_kor+\"(\"+emp.position_code+\")\";\r\n");
      out.write("\t\t\t\t\tnode2.addChild({title: title, key: key});\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tnode2.expand(true);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t,error : function(errorResp) {\r\n");
      out.write("\t\t\tconsole.log(errorResp.status + \":\"+ errorResp.responseText);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("$.ajax({\r\n");
      out.write("\turl: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/address/emp\",\r\n");
      out.write("\tdataType : \"json\",\r\n");
      out.write("\tsuccess:function(data){\r\n");
      out.write("\t\tconsole.log(data);\r\n");
      out.write("\t\t$(\"#tree1\").dynatree({\r\n");
      out.write("\t\t\t  children: data\r\n");
      out.write("\t\t})\r\n");
      out.write("\t}\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("$(\"#groupName\").on(\"change\",function(){\r\n");
      out.write("\tlet node =$(\"#tree2\").dynatree(\"getTree\").selectKey(\"group\");\r\n");
      out.write("\tlet str = $(this).val();\r\n");
      out.write("\tnode.setTitle(str);\t\r\n");
      out.write("});\r\n");
      out.write("  \r\n");
      out.write("$(\"#tree2\").dynatree({\r\n");
      out.write("\t  children: [{\"title\":\"그룹\",\"key\":\"group\",\"isFolder\":\"true\",\"children\":[]}]\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("var groupList = [];\r\n");
      out.write("\r\n");
      out.write("function checkGroup(topNode){\r\n");
      out.write("\tif(topNode.data.isFolder){\r\n");
      out.write("\t\tlet list = topNode.childList;\r\n");
      out.write("\t\t$.each(list,function(idx,node){\r\n");
      out.write("\t\t\tif(node.data.isFolder){\r\n");
      out.write("\t\t\t \tcheckGroup(node);\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tdata = {\r\n");
      out.write("\t\t\t\t\ttitle : node.data.title\r\n");
      out.write("\t\t\t\t\t,key : node.data.key\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tgroupList.push(data);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t}else{\r\n");
      out.write("\t\tdata = {\r\n");
      out.write("\t\t\t\ttitle : topNode.data.title\r\n");
      out.write("\t\t\t\t,key : topNode.data.key\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\tgroupList.push(data);\r\n");
      out.write("\t}\r\n");
      out.write("\tconsole.log(groupList);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("$(\"#btn1\").on(\"click\",function(){\r\n");
      out.write("\tlet node = $(\"#tree1\").dynatree(\"getActiveNode\");\r\n");
      out.write("// \tlet isFolder = node.data.isFolder;\r\n");
      out.write("\tlet node2 = $(\"#tree2\").dynatree(\"getTree\").selectKey(\"group\");\r\n");
      out.write("\tmoveData(node,node2);\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("$(\"#btn2\").on(\"click\",function(){\r\n");
      out.write("\tlet node = $(\"#tree2\").dynatree(\"getActiveNode\");\r\n");
      out.write("\tlet isFolder = node.data.isFolder;\r\n");
      out.write("\tif(isFolder){\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tnode.remove();\t\t\r\n");
      out.write("});\r\n");
      out.write("  \r\n");
      out.write("function moveData(baseNode , addPlaceNode) {\r\n");
      out.write("\tcheckGroup(baseNode);\r\n");
      out.write("\t$.each(groupList,function(idx,temp){\r\n");
      out.write("\t\tlet checkNode = $(\"#tree2\").dynatree(\"getTree\").getNodeByKey(temp.key);\r\n");
      out.write("\t   \tif(checkNode != null){\r\n");
      out.write("\t   \t\treturn;\r\n");
      out.write("\t   \t}\r\n");
      out.write("\t   \taddPlaceNode.addChild({title: temp.title, key: temp.key});\r\n");
      out.write("   \t})\r\n");
      out.write("     addPlaceNode.expand(true);\r\n");
      out.write("\tgroupList = [];\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("$(\"#addBtn\").on(\"click\",function(){\r\n");
      out.write("\tlet node = $(\"#tree2\").dynatree(\"getTree\").getNodeByKey(\"group\");\r\n");
      out.write("\t let list = node.childList;\r\n");
      out.write("\t let dataList = [];\r\n");
      out.write("\t$.each(list,function(idx,temp){\r\n");
      out.write("\t\tdata = {\r\n");
      out.write("\t\t\t\ttitle : temp.data.title\r\n");
      out.write("\t\t\t\t,key : temp.data.key\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdataList.push(data);\t\r\n");
      out.write("\t});\r\n");
      out.write("\tjsonData = JSON.stringify(dataList);\r\n");
      out.write("\t\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/approval/setting/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${state}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write('/');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${position}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\r\n");
      out.write("\t\t,method:\"post\"\r\n");
      out.write("\t\t,data : {dataList:jsonData,title:$(\"#groupName\").val(),code:\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${dataList.line_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"}\r\n");
      out.write("\t\t,success :function(resp){\r\n");
      out.write("\t\t\tif(resp == \"\"){\r\n");
      out.write("\t\t\t\tlocation.href = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/approval/setting/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${state}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t,error : function(error){\r\n");
      out.write("\t\t\talert(error.responseText)\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t})\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
