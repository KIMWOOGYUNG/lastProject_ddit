package kr.or.ddit.project.controller;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.enums.ResultState;
import kr.or.ddit.hr_admin.service.IAdminDepartService;
import kr.or.ddit.hr_admin.service.IAdminEmployService;
import kr.or.ddit.project.dao.IPJStandardDAO;
import kr.or.ddit.project.service.IProjectListService;
import kr.or.ddit.vo.EmployeeVO;
import kr.or.ddit.vo.PJ_MemberVO;
import kr.or.ddit.vo.PJ_RgroupVO;
import kr.or.ddit.vo.PagingVO;
import kr.or.ddit.vo.ProjectVO;
import kr.or.ddit.vo.Project_roleVO;
import kr.or.ddit.vo.TaskVO;

@Controller
public class ProjectFormController {
	
	@Inject
	IProjectListService service;
	@Inject
	IAdminDepartService deptService;
	@Inject
	IPJStandardDAO stdDao;
	@Inject
	IAdminEmployService empService;
	
	@GetMapping(value="/project/tmManage/{project_code}", produces="application/json;charset=UTF-8")
	@ResponseBody
	public PagingVO<EmployeeVO> ajaxList(@PathVariable String project_code, @RequestParam(name="page", required=false, defaultValue="1") int currentPage, EmployeeVO detailSearch, Model model) {
		memManage(project_code, currentPage, detailSearch, model);
		PagingVO<EmployeeVO> pagingVO = (PagingVO<EmployeeVO>) model.asMap().get("pagingVO");
		return pagingVO;
	}
	
	private void attibuteSetting(Model model){
		model.addAttribute("deptList", deptService.selectDeptList());
		model.addAttribute("impList", stdDao.selectImportant());
		model.addAttribute("sttList", stdDao.selectStatus());
		model.addAttribute("tskList", stdDao.selectTaskType());
	}
	
	@GetMapping("/project/roleList")
	@ResponseBody
	public List<Project_roleVO> selectRoles(){
		List<Project_roleVO> roleList = service.selectRoleList();
		return roleList;
	}
	
	//프로젝트 등록 폼
	@GetMapping("/project/newProject")
	public String newProject(Model model) {
		
		List<Project_roleVO> roleList = service.selectRoleList();
		
		attibuteSetting(model);
		model.addAttribute("roleList", roleList);
		return "newProject.project";
	}
	
	//프로젝트 등록
		@PostMapping(value = "/project/insertProject")
		public String insertProject(@Valid @ModelAttribute("project") ProjectVO projectVO,
				Errors errors, Model model, HttpSession session, RedirectAttributes redirectAttributes
				) {
			
			EmployeeVO employeeVO = (EmployeeVO) session.getAttribute("authUser");
			String emp_code = employeeVO.getEmp_code();
			
			projectVO.setDept_code(employeeVO.getDept_code());
			System.out.println(projectVO.toString());
			
			String goPage = null;
			String message = null;
			if(!errors.hasErrors()) {
				ResultState result = service.insertProject(projectVO);
				System.out.println(result);
				switch (result) {
				case FAIL:
					goPage = "newProject.project";
					message = "다시 입력하세요";
					model.addAttribute("message", message);
					break;

				default:
					goPage = "redirect:/project/projectlist/"+emp_code;
					message = "insert성공";
					redirectAttributes.addFlashAttribute("message", message);
					break;
				}
				
			}else {
				goPage = "newProject.project";
				model.addAttribute("message", message);
			}
			
			
			return goPage;
		}
	
	
	//프로젝트 수정 폼
	@GetMapping("/project/editProject/{project_code}")
	public String editProject(@PathVariable String project_code, Model model) {
		attibuteSetting(model);
		ProjectVO vo = service.selectProject(project_code);
		model.addAttribute("project", vo);
		return "newProject.project";
	}
	
	
	//프로젝트 수정
	@PostMapping("/project/updateProject")
	public String update(
		@Valid @ModelAttribute("project") ProjectVO project, @RequestParam String project_code,
		BindingResult errors, Model model,
		RedirectAttributes redirectAttributes
	){
		String goPage = null;
		String message = null;
		if (!errors.hasErrors()) {
			ResultState result = service.updateProject(project);
			switch (result) {
			case FAIL:
				message = "잠시 후 다시 시도해주세요.";
				redirectAttributes.addFlashAttribute("board", project);
				goPage = "redirect:/project/newProject/{project_code}";
				break;
			default: // OK
				goPage = "redirect:/project/projectlist/{who}";
				break;  
			}
		} else {
			goPage = "redirect:/project/newProject/{project_code}";
			redirectAttributes.addFlashAttribute("project", project);
			redirectAttributes.addFlashAttribute("org.springframework.validation.BindingResult.board", errors);
		}

		model.addAttribute("message", message);

		return goPage;
		
	}
	
	//팀관리 폼
	@GetMapping("/project/tmManage/{project_code}")
	public String memManage(@PathVariable String project_code, @RequestParam(name="page", required=false, defaultValue="1") int currentPage, EmployeeVO detailSearch, Model model) {
		String goPage = "teamMemManage.project";
		
		//사원 조회
		PagingVO<EmployeeVO> pagingVO = new PagingVO<>(5,5);
		pagingVO.setDetailSearch(detailSearch);
		pagingVO.setCurrentPage(currentPage);
		int totalRecord = service.readEmpCount(pagingVO);	
		pagingVO.setTotalRecord(totalRecord);
		List<EmployeeVO> empList = service.selectEmpList(pagingVO);
		pagingVO.setDataList(empList);
		
		//구성원 조회
		List<PJ_RgroupVO> rgroupList = service.selectPJ_Rgroup(project_code);
		
		//프로젝트 조회
		ProjectVO project = service.selectProject(project_code);
		
		model.addAttribute("project", project);
		model.addAttribute("rgroupList", rgroupList);
		model.addAttribute("pagingVO", pagingVO);
		return goPage;
	}
	
}
